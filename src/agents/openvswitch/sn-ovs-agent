#!/usr/bin/python2.6
# Copyright 2014 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.
# @author: Luiz Ozaki, Locaweb.
# @author: Eduardo S. Scarpellini, Locaweb.

import pika
import signal
import re
import getopt, sys

from supay import Daemon
from datetime import datetime
from time import sleep

import hashlib
import os
import socket
import sys
import json
import fcntl
import ConfigParser
import httplib
import thread

from ipaddr import IPv4Network, IPv4Address, IPv6Network, IPv6Address, IPNetwork, IPAddress

from lockfile import FileLock, LockTimeout

import difflib
import logging

from subprocess import *

LOGGING_LEVELS = {'critical': logging.CRITICAL,
                  'error': logging.ERROR,
                  'warning': logging.WARNING,
                  'info': logging.INFO,
                  'debug': logging.DEBUG}


myname = os.uname()[1]
logger = None
data = {}
grouter_macs = []
cli = None

class AgentException(Exception):
    pass

class Simplenet(object):
    def __init__(self, host, port, ver, sockfile):
        self.host = host
        self.port = port
        self.ver = ver
        self.sockfile = sockfile

    def do_request(self, method, path, body):
        path = "/" + str(self.ver) + path
        headers = {"Content-Type": "application/json"}
        conn = httplib.HTTPConnection(self.host, self.port)
        conn.request(method, path, json.dumps(body), headers)
        response = conn.getresponse()
        status = response.status
        data = response.read() or "{}"
        return json.loads(data)

    def online(self, **kwargs):
        url = "/switches/%s/interfaces" % (kwargs['switch'])
        kwargs.update({"action": "plug"})
        print self.do_request("POST", url, kwargs)

    def offline(self, **kwargs):
        kwargs.update({"action": "unplug"})
        iface = kwargs.get("id") or kwargs.get("interface_id")
        url = "/switches/%s/interfaces/%s" % (kwargs["switch"], iface)
        print self.do_request("DELETE", url, kwargs)

def _run_cmd(args):
    logger.warn("Running command: %s" % (" ".join(args)))
    p = Popen(args, stdout=PIPE, stderr=PIPE)
    retval, reterr = p.communicate()
    if p.returncode == -(signal.SIGALRM):
        logger.error("## timeout running command: " + " ".join(args))
    if p.returncode != 0:
        raise AgentException("Failed to run command %s.\nOutput %s" % (args, reterr))

    return retval

def add_vlan(switch, tag, ofport):
    bridge = switch.split(":")[1]
    command = ["ovs-ofctl", "add-flow", bridge, "table=0 priority=1 dl_vlan=%s actions=normal" % tag]
    _run_cmd(command)
    command = ["ovs-ofctl", "add-flow", bridge, "priority=50000,in_port=%s,action=normal" % ofport]
    _run_cmd(command)

def remove_vlan(switch, port):
    bridge = switch.split(":")[1]
    command = ["ovs-ofctl", "del-flows", bridge, "in_port=%s" % port]
    _run_cmd(command)

def get_ofport(port):
    command = ["ovs-vsctl", "get", "Interface", port, "ofport"]
    out = _run_cmd(command)
    if out:
        return out.strip()

def _natural_sort_(l):
    l = [str(i) for i in l]
    convert = lambda s: int(s) if s.isdigit() else s.lower()
    alphanum_key = lambda k: [convert(c) for c in re.split(r"([0-9]+)", k)]
    return sorted(l, key=alphanum_key)


class NetworkWorker(object):

    def __init__(self, data):
        self.body           = json.loads(data)
        self.action         = self.body.get("action")
        self.switch_name    = self.body.get("switch_id", {}).get("name") or self.body.get("switch")
        self.vlanname       = self.body.get("vlanname")
        self.vlan_id        = self.body.get("vlan_id")
        self.vlan_type      = self.vlan_id.get("type") if self.vlan_id is not None else None
        self.vlan_num       = self.vlan_id.get("vlan_num", {}) if self.vlan_id is not None else None
        self.vif            = self.body.get("name")
        self.mac            = self.body.get("id") or self.body.get("interface_id")
        self.ofport         = self.body.get("ofport")
        self.bridgeport     = self.body.get("bridgeport")
        self.bridgemac      = self.body.get("bridgemac") or self.body.get("switch_id", {}).get("mac")
        self.router_macs    = self.body.get("routers", [])
        self.rawips         = self.body.get("ips", [])
        self.ips            = []
        self.notify         = None

    def _notify(self):
        self.body.update({"ack": self.notify, "switch": self.switch_name})
        if self.action and self.notify:
            if self.action == "plug" or self.action == "replug":
                cli.online(**self.body)
            elif self.action == "unplug":
                cli.offline(**self.body)

    def run(self, ips=[]):
        try:
            self.update_routers()
            self.load_ips(ips)
            if self.action:
                if self.action == "plug" or self.action == "replug":
                    self.add()
                    self._notify()
                elif self.action == "unplug":
                    self.remove()
                    self._notify()
                elif self.action == "removeip":
                    self.remove_ip_from_private_vlan(self.body["ip"])
            else:
                logger.warn("Action not implemented: " + str(body))
        except AgentException:
            logger.error("Agent cached run failed -- IP")
            self._notify()
        except:
            logger.exception("Unknown agent error")

    def load_ips(self, ips=[]):
        if ips:
            [self.ips.append((ip, "private_vlan", vlan)) for ip, vlan in ips]
        elif self.rawips:
            [self.ips.append((ip['ip'], ip['subnet']['vlan']['type'], ip['subnet']['vlan']['vlan_num'])) for ip in self.rawips]
        else:
            raise AgentException("No IPs found")

    def update_routers(self):
        global grouter_macs
        macs = [x['mac'] for x in self.router_macs if x.get("mac")]
        if macs and len(macs) > len(grouter_macs):
            grouter_macs = macs
        self.router_macs = grouter_macs

    def add_flow(self, flow):
        addr = self.switch_name.split(":")[1]
        command = ["ovs-ofctl", "add-flow", addr, flow]
        _run_cmd(command)

    def del_flow(self, flow):
        addr = self.switch_name.split(":")[1]
        command = ["ovs-ofctl", "del-flows", addr, flow]
        _run_cmd(command)

    def add(self):
        if self.vlan_id is not None and self.vlan_type == "dedicated_vlan":
            add_vlan(self.switch_name, self.vlan_num, self.ofport)
        else:
            for ip, _type, vlan in self.ips:
                if _type == "private_vlan":
                    self.add_to_private_vlan(ip, vlan)

    def remove(self):
        if self.vlan_id is not None and self.vlan_type == "dedicated_vlan":
            remove_vlan(self.switch_name, self.ofport)
        else:
            for ip, _type, vlan in self.ips:
                if _type == "private_vlan":
                    self.remove_from_private_vlan(ip)

    def add_to_private_vlan(self, ip, subnet_vlan_num):
        ##### TABLE 0 #####
        rule = "table=0 dl_src=01:00:00:00:00:00/01:00:00:00:00:00 actions=drop" # multicast
        self.add_flow(rule)

        rule = "table=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0 actions=drop" # spanning tree
        self.add_flow(rule)

        rule = "table=0 priority=0 actions=resubmit(,1)" # default
        self.add_flow(rule)

        ##### TABLE 1 #####
        rule = "table=1 priority=0 actions=drop"
        self.add_flow(rule)

        rule = "table=1 priority=100 dl_type=0x0806 actions=resubmit(,22)"
        self.add_flow(rule)

        for mac in self.router_macs:
            rule = "table=1 priority=99 in_port=1 dl_src=%s actions=resubmit(,2)" % mac
            self.add_flow(rule)
            rule = "table=1 priority=99 in_port=2 dl_src=%s actions=resubmit(,2)" % mac
            self.add_flow(rule)
            rule = "table=1 priority=99 dl_type=0x0800 dl_dst=%s actions=resubmit(,3)" % mac
            ##### TABLE 22 #####
            self.add_flow(rule)
            rule = "table=22 priority=100 dl_type=0x0806 arp_sha=%s nw_dst=%s actions=strip_vlan,%s" % (
                mac, ip, self.ofport
            )
            self.add_flow(rule)
            rule = "table=22 priority=99 vlan_tci=0 in_port=%s dl_type=0x0806 dl_src=%s dl_dst=%s actions=mod_vlan_vid:%s,bundle(eth_src,0,hrw,ofport,slaves:1,2)" % (
               self.ofport, self.mac, mac, subnet_vlan_num
            )
            self.add_flow(rule)

        ##### TABLE 2 #####
        rule = "table=2 priority=99 dl_type=0x0800 dl_dst=%s nw_dst=%s actions=strip_vlan,%s" % (
            self.mac, ip, self.ofport
        )
        self.add_flow(rule)

        ##### TABLE 3 #####
        rule = "table=3 priority=99 in_port=%s dl_type=0x0800 dl_src=%s nw_src=%s actions=mod_vlan_vid:%s,bundle(eth_src,0,hrw,ofport,slaves:1,2)" % (
            self.ofport, self.mac, ip, subnet_vlan_num
        )
        self.add_flow(rule)

        ##### TABLE 22 #####
        rule = "table=22 priority=99 vlan_tci=0 in_port=%s dl_type=0x0806 dl_src=%s dl_dst=ff:ff:ff:ff:ff:ff actions=mod_vlan_vid:%s,bundle(eth_src,0,hrw,ofport,slaves:1,2)" % (
            self.ofport, self.mac, subnet_vlan_num
        )
        self.add_flow(rule)

        rule = "table=22 priority=0 actions=drop"
        self.add_flow(rule)

        dhcp_request = "priority=41000,udp,in_port=%s,tp_src=68,tp_dst=67 "
        dhcp_request += "actions=mod_dl_dst:%s,%s"
        self.add_flow(dhcp_request % (self.ofport, self.bridgemac, self.bridgeport))

        dhcp_src = "priority=29000,arp,dl_vlan=%s,dl_src=%s actions=normal"
        self.add_flow(dhcp_src % (subnet_vlan_num, self.bridgemac))

        dhcp_dst = "priority=41000,arp,dl_vlan=%s,dl_dst=%s actions=%s"
        self.add_flow(dhcp_dst % (subnet_vlan_num, self.bridgemac, self.bridgeport))

        dhcp_reply = "priority=41000,udp,dl_src=%s,tp_src=67,"
        dhcp_reply += "tp_dst=68 actions=normal"
        self.add_flow(dhcp_reply % (self.bridgemac))

    def remove_from_private_vlan(self, ip):
        self.del_flow("dl_src=%s" % self.mac)
        self.del_flow("dl_dst=%s" % self.mac)
        self.del_flow("dl_type=0x0806 arp_tpa=%s" % ip)

    def remove_ip_from_private_vlan(self, ip):
        self.del_flow("ip,dl_src=%s,nw_src=%s" % (self.mac, ip))
        self.del_flow("ip,dl_dst=%s,nw_dst=%s" % (self.mac, ip))
        self.del_flow("arp,arp_tpa=%s" % ip)

def on_message(channel, method_frame, header_frame, body):
    logger.info("Processing message with body: %s" % (body))
    try:
        nw = NetworkWorker(body)
        nw.notify = False
        nw.run()
        channel.basic_ack(delivery_tag=method_frame.delivery_tag)
    except AgentException as inst:
        channel.basic_ack(delivery_tag=method_frame.delivery_tag)
        logger.error(inst)

def help():
    print '%s::' % sys.argv[0]
    print '   -a action <stop|start|status|foreground>'
    print '   -u user <simplenet>'
    print '   -c config </etc/simplenet/agents.cfg>'


def _read_cache(f):
    global data
    try:
        d = open(f)
        tmp = json.load(d)
        if len(tmp) > len(data):
            logger.info("Replacing cache [%s] to [%s]" % (len(data), len(tmp)))
            data = tmp
    finally:
        d.close()

def read_cache(f):
    while True:
        _read_cache(f)
        sleep(60)

def get_cache(mac):
    r = []
    for _,i in data.iteritems():
        r += [x['ip'] for x in i['ips'] if x['mac'] and x['mac'].lower() == mac.lower()]
    return r

def listen(f):
    try:
        os.unlink(f)
    except OSError:
        if os.path.exists(f):
            raise

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(f)
    sock.listen(1)

    while True:
        conn, _ = sock.accept()
        data = ""
        try:
            while True:
                ret = conn.recv(65535)
                if ret:
                    data += ret
                else:
                    break
        finally:
            conn.close()
        nw = NetworkWorker(data)
        nw.notify = True
        nw.run([(ip, re.sub("[^0-9]", "", nw.vlanname)) for ip in get_cache(nw.mac)])

def main(user, action, config_file):
    global logger, grouter_macs, cli
    config = ConfigParser.ConfigParser()
    config.read(config_file)

    if config.has_option('ovs','hostname'):
        global myname
        myname = config.get('ovs','hostname')

    logger = create_logger(config)
    if action == 'foreground':
        logger.addHandler(logging.StreamHandler())

    cli = Simplenet(config.get("simplenet", "address"),
                    config.getint("simplenet", "port"),
                    config.get("simplenet", "version"),
                    config.get("ovs", "sockfile"))

    grouter_macs = json.loads(config.get('ovs', 'fallback'))
    _read_cache(config.get('ovs', 'cachefile'))

    try:
        thread.start_new_thread(read_cache, (config.get('ovs', 'cachefile'),) )
        thread.start_new_thread(listen, (config.get('ovs', 'sockfile'),) )
    except:
        logger.exception("Error: unable to start thread")

    cred = pika.PlainCredentials(config.get('ovs','broker_user'),config.get('ovs','broker_pass'))

    connection = pika.BlockingConnection(pika.ConnectionParameters(
        config.get('ovs','broker_host'),
        config.getint('ovs','broker_port'),
        '/',
        cred))

    channel = connection.channel()

    channel.queue_declare(queue=myname, durable=True, exclusive=False, auto_delete=False)
    channel.basic_consume(on_message, myname)

    try:
        channel.start_consuming()
    finally:
        connection.close()

def create_logger(config):
    # create logger
    logger = logging.getLogger('sn-ovs-agent')
    logger.setLevel(LOGGING_LEVELS.get(config.get('ovs', 'logging')))

    formatter = logging.Formatter('%(asctime)s [%(name)s/%(levelname)s] %(message)s')

    fileHandler = logging.FileHandler('/var/log/simplenet-ovs.log')
    fileHandler.setLevel(LOGGING_LEVELS.get(config.get('ovs', 'logging')))
    fileHandler.setFormatter(formatter)

    logger.addHandler(fileHandler)

    return logger

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'a:u:c:', ['action=', 'user=', 'config='])
    except getopt.GetoptError, err:
        help()

    user = 'simplenet'
    action = 'start'
    config = '/etc/simplenet/agents.cfg'
    for o, a in opts:
        if o in ('-a', '--action'):
            action = a
        elif o in ('-u', '--user'):
            user = a
        elif o in ('-c', '--config'):
            config = a
        else:
            help()

    daemon = Daemon(name='simplenet', catch_all_log='/var/log/simplenet-ovs.log')
    if action == 'start':
        daemon.start()
        main(user, action, config)
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
    elif action == 'foreground':
        main(user, action, config)
