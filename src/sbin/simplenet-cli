#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the 'License');
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an 'AS IS' BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.
# @author: Luiz Ozaki, Locaweb.

from ipaddr import IPv4Network, IPv4Address, IPv6Network, IPv6Address, IPNetwork, IPAddress
import sys
import json
import baker
import requests
import ConfigParser

config_file = '/etc/simplenet/simplenet-cli.cfg'

config = ConfigParser.ConfigParser()
config.read(config_file)

server = config.get('server', 'api_endpoint')
apiversion = "/v1"

server = server + apiversion

def call(method, url, data=None):
    if (method == 'get'):
        ret = requests.get(url)
    elif (method == 'post'):
        ret = requests.post(url, data=data)
    elif (method == 'delete'):
        ret = requests.delete(url)
        if ret.status_code == 200:
            class result(object):
                status_code = None
                text = None
            _ret = result()
            _ret.status_code = ret.status_code
            _ret.text = json.dumps(
                {'message':
                    {'message': 'Successful deletetion'},
                 'status': 200
                }
            )
            ret = _ret
    return ret


def fetch_id(_type, _data):
    if (_type == 'subnets') or (_type == 'anycasts'):
        data = call('get', '%s/%s/by-cidr/%s' %
            (server, _type, _data.replace('/', '_'))
        )
    elif _type in ('ips', 'anycastips'):
        data = call('get', '%s/%s/by-ip/%s' % (server, _type, _data))
    elif _type == 'interfaces':
        data = call('get', '%s/%s/by-mac/%s' % (server, _type, _data))
    else:
        data = call('get', '%s/%s/by-name/%s' % (server, _type, _data))

    try:
        return json.loads(data.text)[0]['id']
    except:
        pretty_output(data)
        sys.exit(1)


def pretty_output(r):
    data = r.text
    try:
        print json.dumps(json.loads(data), sort_keys=True, indent=4)
    except ValueError:
        print data

    if (r.status_code != 200):
        sys.exit(1)
    sys.exit(0)


@baker.command(
    params={'action': '<list all|info|create|delete>',
            'name': 'datacenter name'}
)
def datacenter(action=None, name=None):
    """Manage the datacenter entity

    simplenet-cli datacenter create --name dc01
    """
    base_url = '%s/datacenters' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        r = call('post', base_url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('datacenters', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|info|create|delete>',
            'name': 'POD name'}
)
def pod(action=None, name=None, datacenter=None):
    """Manage a POD (zone) related to a datacenter

    simplenet-cli pod create --name pod01 --datacenter dc01
    """
    base_url = '%s/zones' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not datacenter:
            print 'Missing datacenter_id to create'
            sys.exit(1)

        datacenter_id = fetch_id('datacenters', datacenter)
        r = call('post', '%s/zones' %
            (server),
            data=json.dumps({'name': name, 'datacenter_id': datacenter_id})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('zones', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|firewall_list|dhcp_list>',
            'name': 'vlan name',
            'type': 'vlan type',
            'number': 'vlan number',
            'pod': 'POD (zone) name to bind the vlan'}
)
def vlan(action=None, name=None, number=None, pod=None, type=None):
    """Manage a vlan related to a POD (zone)

    simplenet-cli vlan create --name vlan01 --number 1 --pod pod01
    """
    base_url = '%s/vlans' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not pod:
            print 'Missing POD to create'
            sys.exit(1)

        zone_id = fetch_id('zones', pod)
        r = call('post', '%s/vlans' % (server),
                data=json.dumps({'name': name, 'type': type, 'vlan_num': number, 'zone_id': zone_id})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('vlans', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    elif action == 'firewall_list':
        r = call('get', '%s/firewalls/list-by-vlan/%s' %
            (server, fetch_id('vlans', name))
        )
    elif action == 'dhcp_list':
        r = call('get', '%s/dhcps/list-by-vlan/%s' %
            (server, fetch_id('vlans', name))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|rename>',
            'cidr': 'subnet cidr',
            'vlan': 'vlan to bind the subnet'}
)
def subnet(action=None, cidr=None, vlan=None):
    """Manage a subnet related to a vlan

    simplenet-cli subnet create --cidr 192.168.0.0/24 --vlan vlan01
    """
    base_url = '%s/subnets' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not vlan:
            print 'Missing vlan to create'
            sys.exit(1)

        vlan_id = fetch_id('vlans', vlan)
        r = call('post', '%s/subnets' % (server),
                data=json.dumps({'cidr': cidr, 'vlan_id': vlan_id})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('subnets', cidr))
        )
    elif action == 'info':
        r = call('get', '%s/by-cidr/%s' %
            (base_url, cidr.replace('/', '_'))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|rename>',
            'cidr': 'subnet cidr'}
)
def anycast(action=None, cidr=None):
    """Manage an anycast subnet

    simplenet-cli anycast create --cidr 192.168.1.0/24
    """
    base_url = '%s/anycasts' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        r = call('post', '%s/anycasts' % (server),
             data=json.dumps({'cidr': cidr})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('anycasts', cidr))
        )
    elif action == 'info':
        r = call('get', '%s/by-cidr/%s' %
            (base_url, cidr.replace('/', '_'))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|rename|info|vlan_info>',
            'ip': 'ip address',
            'subnet': 'subnet cidr'}
)
def ip(action=None, ip=None, subnet=None):
    """Manage an ip contained in a subnet

    simplenet-cli ip create --ip 192.168.0.1 --subnet 192.168.0.0/24
    """
    base_url = '%s/ips' % (server)
    base_url_net = '%s/subnets' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not subnet:
            print 'Missing subnet to create'
            sys.exit(1)

        if subnet == 'auto':
            r = call('get', '%s' % base_url_net)

            for net in json.loads(r.text):
                if IPNetwork(net['cidr']).Contains(IPAddress(ip)):
                    subnet = net['cidr']
            if subnet == 'auto':
                print 'Could not find a suitable subnet'
                sys.exit(1)

        r = call('post', '%s/ips' %
            (server),
            data=json.dumps({'ip': ip, 'subnet_id': fetch_id('subnets', subnet)})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('ips', ip))
        )
    elif action == 'info':
        r = call('get', '%s/by-ip/%s' % (base_url, ip))
    elif action == 'vlan_info':
        r = call('get', '%s/vlans/by-ip/%s' % (server, ip))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|rename>',
            'ip': 'ip address',
            'anycast': 'anycast cidr'}
)
def anycastip(action=None, ip=None, anycast=None):
    """Manage an ip contained in a anycast subnet

    simplenet-cli anycastip create --ip 192.168.1.1 --anycast 192.168.1.0/24
    """
    base_url = '%s/anycastips' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not anycast:
            print 'Missing anycast subnet to create'
            sys.exit(1)

        r = call('post', '%s/anycastips' %
            (server),
            data=json.dumps({'ip': ip, 'anycast_id': fetch_id('anycasts', anycast)})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('anycastips', ip))
        )
    elif action == 'info':
        r = call('get', '%s/by-ip/%s' % (base_url, ip))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': ('<list all|create|delete|sync'
            '|vlan_create|vlan_list|anycast_attach|zonesync>'),
            'name': 'firewall device name',
            'pod': 'pod to create a new device',
            'vlan': 'vlan to attach vlans to devices',
            'anycast': 'attach anycast to a device',
            'mac': 'Firewall MAC address'}
)
def firewall(action=None, name=None, pod=None,
             vlan=None, anycast=None, mac=None):
    """Manage a firewall device related to a zone

    simplenet-cli firewall create --name firewall01 --pod zone01
    """
    base_url = '%s/firewalls' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not pod:
            print 'Missing pod to create'
            sys.exit(1)
        zone_id = fetch_id('zones', pod)
        r = call('post', '%s/firewalls' % (server),
                data=json.dumps({'name': name, 'zone_id': zone_id,
                                'mac': mac})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' % (
            base_url, fetch_id('firewalls', name))
        )
    elif action == 'disable':
        r = call('post', '%s/firewalls/disable' % (server),
            data=json.dumps({'name': name})
        )
    elif action == 'enable':
        r = call('post', '%s/firewalls/enable' % (server),
            data=json.dumps({'name': name})
        )
    elif action == 'sync':
        r = call('post', '%s/firewalls/sync' % (server),
            data=json.dumps({'name': name})
        )
    elif action == 'zonesync':
        r = call('post', '%s/firewalls/zonesync' % (server),
            data=json.dumps({'name': name})
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    elif action == 'anycast_attach':
        if not anycast:
            print 'Missing anycast to attach'
            sys.exit(1)

        anycast_id = fetch_id('anycasts', anycast)
        r = call('post', '%s/%s/anycasts' %
            (base_url, fetch_id('firewalls', name)),
            data=json.dumps({'anycast_id': anycast_id})
        )
    elif action == 'anycast_detach':
        if not anycast:
            print 'Missing anycast to attach'
            sys.exit(1)

        r = call('delete', '%s/%s/anycasts/%s' % (
            base_url,
            fetch_id('firewalls', name),
            fetch_id('anycasts', anycast))
        )
    elif action == 'vlan_list':
        r = call('get', '%s/vlans/list-by-firewall/%s' %
            (server, fetch_id('firewalls', name))
        )
    elif action == 'anycast_list':
        r = call('get', '%s/anycasts/list-by-firewall/%s' %
            (server, fetch_id('firewalls', name))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|info|create|delete>',
            'name': 'router name',
            'pod': 'zone name',
            'mac': 'router mac address'}
)
def router(action=None, name=None, pod=None, mac=None):
    """Manage router entity

    simplenet-cli router create --name router01 --pod pod01
    """
    base_url = '%s/routers' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if not pod:
            print 'Missing pod to create'
            sys.exit(1)
        zone_id = fetch_id('zones', pod)
        r = call('post', base_url, data=json.dumps(
            {'name': name, 'zone_id': zone_id, 'mac': mac}
        ))
    elif action == 'delete':
        r = call('delete', '%s/%s' %
            (base_url, fetch_id('routers', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': ('<list all|create|delete|vlan_attach'
            '|vlan_list|vlan_detach>'),
            'name': 'dhcp device name',
            'vlan': 'vlan to attach vlans to devices'}
)
def dhcp(action=None, name=None, vlan=None):
    """Manage a dhcp server related to a vlan

    simplenet-cli dhcp create --name firewall01 --vlan vlan01
    """
    base_url = '%s/dhcps' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        vlan_id = fetch_id('vlans', vlan) if vlan else None
        r = call('post', '%s/dhcps' % (server),
                data=json.dumps({'name': name, 'vlan_id': vlan_id})
        )
    elif action == 'delete':
        r = call('delete', '%s/%s' % (
            base_url, fetch_id('dhcps', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    elif action == 'vlan_attach':
        if not vlan:
            print 'Missing vlan to attach'
            sys.exit(1)

        vlan_id = fetch_id('vlans', vlan)
        r = call('post', '%s/%s/vlans' %
            (base_url, fetch_id('dhcps', name)),
            data=json.dumps({'vlan_id': vlan_id})
        )
    elif action == 'vlan_detach':
        if not vlan:
            print 'Missing vlan to attach'
            sys.exit(1)

        r = call('delete', '%s/%s/vlans/%s' % (
            base_url, fetch_id('dhcps', name), fetch_id('vlans', vlan))
        )
    elif action == 'vlan_list':
        r = call('get', '%s/vlans/list-by-dhcp/%s' %
            (server, fetch_id('dhcps', name))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|create|delete|int_attach|int_detach>',
            'name': 'switch device name',
            'model_type': '<openvswitch>',
            'mac': 'device mac address',
            'inter': 'interface',
            'int_name': 'interface binding name',
            'address': 'admin uri'}
)
def switch(action=None, name=None, model_type=None, mac=None,
           address=None, inter=None, int_name=None, ofport=None):
    base_url = '%s/switches' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'create':
        if model_type == 'openvswitch':
            if mac == None or address == None:
                print 'Missing mac or address atributes'
                sys.exit(1)
            r = call('post', '%s/switches' % (server),
                    data=json.dumps({'name': name, 'model_type': model_type,
                                    'address': address, 'mac': mac})
            )
        else:
            print 'Unknown model_type'
            sys.exit(1)
    elif action == 'delete':
        r = call('delete', '%s/%s' % (
            base_url, fetch_id('switches', name))
        )
    elif action == 'info':
        r = call('get', '%s/by-name/%s' % (base_url, name))
    elif action == 'int_attach':
        if not inter or not int_name:
            print 'Missing interface or interface name to attach'
            sys.exit(1)

        r = call('post', '%s/%s/interfaces' %
            (base_url, fetch_id('switches', name)),
            data=json.dumps({'interface_id': inter,
                            'int_name': int_name,
                            'ofport': ofport})
        )
    elif action == 'int_detach':
        if not inter:
            print 'Missing interface to detach'
            sys.exit(1)

        r = call('delete', '%s/%s/interfaces/%s' %
            (base_url, fetch_id('switches', name), inter)
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|info|create|delete|ip_attach|ip_detach|vlan_attach|vlan_detach>',
            'mac': 'interface mac address',
            'ip': 'ip address',
            'vlan': 'vlan',
            'hostname': 'hostname'}
)
def interface(action=None, mac=None, ip=None, vlan=None, hostname=None):
    base_url = '%s/interfaces' % (server)
    r = None
    if action == 'list':
        r = call('get', '%s' % base_url)
    elif action == 'info':
        r = call('get', '%s/by-mac/%s' % (base_url, mac))
    elif action == 'create':
        if not mac:
            print 'Missing mac to create'
            sys.exit(1)

        r = call('post', '%s' % (base_url),
                data=json.dumps({'mac': mac,
                                'hostname': hostname}
                )
        )
    elif action == 'delete':
        if not mac:
            print 'Missing mac to delete'
            sys.exit(1)

        r = call('delete', '%s/%s' % (
            base_url, fetch_id('interfaces', mac))
        )
    elif action == 'vlan_attach':
        if not vlan:
            print 'Missing vlan to attach'
            sys.exit(1)

        r = call('post', '%s/%s/vlans' %
            (base_url, mac), data=json.dumps({'name': vlan}))
    elif action == 'vlan_detach':
        if not vlan:
            print 'Missing vlan to detach'
            sys.exit(1)
        r = call('delete', '%s/%s/vlans/%s' %
            (base_url, mac, vlan))
    elif action == 'ip_attach':
        if not ip:
            print 'Missing ip to attach'
            sys.exit(1)

        r = call('post', '%s/%s/ips' %
            (base_url, mac), data=json.dumps({'ip': ip}))
    elif action == 'ip_detach':
        if not ip:
            print 'Missing ip to detach'
            sys.exit(1)
        r = call('delete', '%s/%s/ips/%s' %
            (base_url, mac, fetch_id('ips', ip)))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={'action': '<list all|attach|create|delete|rename>',
            'name': 'type of owner <zone|vlan|subnet|ip|anycast|anycastip>',
            'owner': 'policy owner name',
            'in_iface': 'inbound interface name',
            'out_iface': 'outbound interface name',
            'src': 'source ip or subnet',
            'src_port': 'source port',
            'dst': 'destination ip or subnet',
            'dst_port': 'destination port',
            'proto': 'protocol name or number',
            'table': 'table to apply the policy <INPUT|FORWARD|OUTPUT>',
            'policy': 'policy to use <ACCEPT|REJECT|DROP>'}
)
def firewallrule(action=None, name=None, owner=None, in_iface=None,
                out_iface=None, dst=None, src=None, dst_port=None,
                src_port=None, proto=None, table=None, policy=None):
    """Manage firewall rules

    simplenet-cli firewallrule create --subnet 192.168.0.0/24 --dst 192.168.0.2 --proto tcp --table INPUT --policy DROP
    """
    base_url = '%s/firewalls/policies' % server
    r = None
    if action == 'list':
        if owner == 'all':
            r = call('get', '%s/by-type/%s' % (base_url, name))
        else:
            r = call('get', '%s/by-owner/%s/%s' %
                (base_url, name, fetch_id('%ss' % name, owner))
            )
    elif action == 'create':
        owner_id = fetch_id('%ss' % name, owner)
        if not table:
            print 'Missing table to create'
            sys.exit(1)
        elif not policy:
            print 'Missing policy to create'
            sys.exit(1)
        elif src_port or dst_port and not proto:
            print 'Missing proto'
            sys.exit(1)

        data = {}
        for key in ['policy', 'dst', 'src', 'dst_port',
                    'src_port', 'proto', 'table', 'out_iface',
                    'in_iface']:
            value = vars()[key]
            if key != None:
                data.update({key: value})
        print '%s/%s/%s' % (base_url, name, owner_id)
        r = call('post', '%s/%s/%s' %
            (base_url, name, owner_id), data=json.dumps(data)
        )
    elif action == 'delete':
        r = call('delete', '%s/%s/%s' % (base_url, name, owner))
    elif action == 'info':
        r = call('get', '%s/%s/%s' % (base_url, name, owner))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

if __name__ == '__main__':
    baker.run()
